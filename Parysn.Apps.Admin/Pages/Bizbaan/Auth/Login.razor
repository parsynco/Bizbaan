@page "/Login/{redirect?}"
@inject IConfiguration _conf
@using Parsyn.Apps.Company.Data.Models.Dtos.AuthDtos
@using Parysn.Apps.Company.Service.Utiles.ShareMemmory
@layout AuthLayout;


<div class="login-page-content">
	<div class="login-form">
		<div class="login-form-title">
			<div class="form-title-logo">
				<img src="./assets/img/logo/biz.logo.small.png" />
			</div>
			<h6 class="form-title">
				پنل مدیریت محتوا بیزبان
			</h6>
		</div>
		<div class="login-form-content">
			@if (IsActiveOtp)
			{
				<MudTabs @bind-ActivePanelIndex="activePanel" Elevation="1" Rounded="true" @ref="_loginTabs">
					<MudTabPanel Disabled Text="Verification code" @ref="pn_verify_otp" ID="@("pn_verify_otp")">
						<MudPaper Elevation="0" Class="pt-5 pb-5">
							<div class="login-form-row">
								<MudText Typo="Typo.h6">@OtpMsg</MudText>
							</div>
							<div class="login-form-row">
								<MudTextField @bind-Value="model.Username" Variant="Variant.Outlined" Adornment="Adornment.End" dir="ltr" AdornmentIcon="@Icons.Material.Filled.VerifiedUser" AdornmentColor="Color.Info" Margin="Margin.Dense" Label="نام کاربری" T="string" />
							</div>
							<div class="login-form-row">
								<MudTextField @bind-Value="model.Otp" Variant="Variant.Outlined" Adornment="Adornment.End" dir="ltr" AdornmentIcon="@Icons.Material.Filled.VerifiedUser" AdornmentColor="Color.Info" Margin="Margin.Dense" Label="کد یکبار مصرف " T="string" />
							</div>
							<div class="login-form-row">
								<MudButton OnClick="VerifyOtp" Style="font-family:DanaR" FullWidth=true Variant="Variant.Outlined" Disabled="_loadingOtp" Color="Color.Primary">
									@if (_loadingOtp)
									{
										<MudProgressCircular Color="Color.Primary" Indeterminate Size="Size.Small"></MudProgressCircular>
									}
									else
									{
										<span>ورود</span>
									}
								</MudButton>
							</div>
							<div class="login-form-row" style="direction:ltr;">
								<a href="javascript:void(0);" @onclick="RegenrateOtp" style="direction:ltr;text-align:left;"><i class="fa fa-question"></i>Code is not received? resend!</a>
							</div>
						</MudPaper>

					</MudTabPanel>

					<MudTabPanel Disabled Text="User creditional" @ref="pn_login" ID="@("pn_login")">
						<MudPaper Elevation="0" Class="pt-5 pb-5">
							<div class="login-form-row">
								<MudTextField @bind-Value="model.Username" Variant="Variant.Outlined" Adornment="Adornment.End" dir="ltr" AdornmentIcon="@Icons.Material.Filled.VerifiedUser" AdornmentColor="Color.Info" Margin="Margin.Dense" Label="نام کاربری" T="string" />
							</div>
							<div class="login-form-row">
								<MudTextField @bind-Value="model.Password"
											  AdornmentColor="Color.Info"
											  dir="ltr"
											  Label="رمز عبور"
											  Margin="Margin.Dense"
											  Variant="Variant.Outlined"
											  InputType="@pwdType"
											  Adornment="Adornment.End"
											  AdornmentIcon="@pwdIcon"
											  OnAdornmentClick="ChangeTextType"
											  AdornmentAriaLabel="نمایش رمز عبور" />
							</div>
							<div class="login-form-row">
								<MudButton OnClick="Authenticate" Style="font-family:DanaR" FullWidth=true Variant="Variant.Outlined" Disabled="_loading" Color="Color.Primary">
									@if (_loading)
									{
										<MudProgressCircular Color="Color.Primary" Indeterminate Size="Size.Small"></MudProgressCircular>
									}
									else
									{
										<span>ورود</span>
									}
								</MudButton>
							</div>
						</MudPaper>
					</MudTabPanel>
				</MudTabs>
			}
			else
			{
				<div class="login-form-row">
					<MudTextField @bind-Value="model.Username" Variant="Variant.Outlined" Adornment="Adornment.End" dir="ltr" AdornmentIcon="@Icons.Material.Filled.VerifiedUser" AdornmentColor="Color.Info" Margin="Margin.Dense" Label="نام کاربری" T="string" />
				</div>
				<div class="login-form-row">
					<MudTextField @bind-Value="model.Password"
								  AdornmentColor="Color.Info"
								  dir="ltr"
								  Label="رمز عبور"
								  Margin="Margin.Dense"
								  Variant="Variant.Outlined"
								  InputType="@pwdType"
								  Adornment="Adornment.End"
								  AdornmentIcon="@pwdIcon"
								  OnAdornmentClick="ChangeTextType"
								  AdornmentAriaLabel="نمایش رمز عبور" />
				</div>
				<div class="login-form-row">
					<MudButton OnClick="Authenticate" Style="font-family:DanaR" FullWidth=true Variant="Variant.Outlined" Disabled="_loading" Color="Color.Primary">
						@if (_loading)
						{
							<MudProgressCircular Color="Color.Primary" Indeterminate Size="Size.Small"></MudProgressCircular>
						}
						else
						{
							<span>ورود</span>
						}
					</MudButton>
				</div>
			}
			<div class="login-form-row">
				<a href="#"><i class="fa fa-question"></i>فراموشی رمز عبور</a>
			</div>
		</div>
	</div>
</div>





@code {
	HttpClientHelper<ResponseObject> hch = new HttpClientHelper<ResponseObject>(UIHelper.ApiUrl());
	HttpClient _hc;
	[Parameter]
	public string? redirect { get; set; }
	public InputType pwdType { get; set; } = InputType.Password;
	public string pwdIcon { get; set; } = Icons.Material.Filled.VisibilityOff;
	public bool isShow { get; set; } = false;
	private LoginDto model { get; set; } = new LoginDto();
	public bool _loading { get; set; } = false;
	public bool _loadingOtp { get; set; } = false;
	public bool IsActiveOtp { get; set; } = true;
	public string OtpMsg { get; set; } = "";
	/****/
	MudTabs _loginTabs;
	MudTabPanel pn_login;
	MudTabPanel pn_verify_otp;
	int activePanel { get; set; } = 1;
	protected override async Task OnInitializedAsync()
	{
		_hc = hch.Instance();
		string otpstate = _conf["OTPSTATE"] ?? "false";
		IsActiveOtp = bool.Parse(otpstate);
		await base.OnInitializedAsync();
	}
	public async void RegenrateOtp()
	{
		if (string.IsNullOrEmpty(model.Username))
		{
			_snackbar.Add("Username is required.", Severity.Error);
			return;
		}
		var res = await hch.Post(model, "Auth/otp");
		_snackbar.Add(res.Msg, res.Status == ResponseObjectStatusEnum.Error ? Severity.Error : Severity.Success);
		StateHasChanged();

	}
	public async void VerifyOtp()
	{
		if (string.IsNullOrEmpty(model.Username))
		{
			_snackbar.Add("Username is required.", Severity.Error);
			return;
		}
		if (string.IsNullOrEmpty(model.Otp))
		{
			_snackbar.Add("OTP code is required.", Severity.Error);
			return;
		}
		_loadingOtp = true;
		var res = await hch.Post(model, "Auth/ValidateOtp");
		_snackbar.Add(res.Msg, res.Status == ResponseObjectStatusEnum.Error ? Severity.Error : Severity.Success);
		_loadingOtp = false;
		StateHasChanged();
		if (res.Status == ResponseObjectStatusEnum.Success)
		{

			model = new LoginDto();
			var result = JsonConvert.DeserializeObject<AuthUserDto>(res.Data.ToString());
			USR.SetItem(result);
			_nv.NavigateTo("/");

		}

	}
	public async void Authenticate()
	{
		if (string.IsNullOrEmpty(model.Username))
		{
			_snackbar.Add("Username is required.", Severity.Error);
			return;
		}
		if (string.IsNullOrEmpty(model.Password))
		{
			_snackbar.Add("Password is required.", Severity.Error);
			return;
		}
		_loading = true;
		var res = await hch.Post(model, "Auth");
		_snackbar.Add(res.Msg, res.Status == ResponseObjectStatusEnum.Error ? Severity.Error : Severity.Success);
		_loading = false;
		StateHasChanged();
		if (res.Status == ResponseObjectStatusEnum.Success)
		{
			if (string.IsNullOrEmpty(res.AdditionalData.ToString()))
			{
				model = new LoginDto();
				var result = JsonConvert.DeserializeObject<AuthUserDto>(res.Data.ToString());
				USR.SetItem(result);
				_nv.NavigateTo("/");
			}
			else
			{
				// _loginTabs.ActivatePanel(pn_verify_otp);
				activePanel = 0;
				StateHasChanged();
			}
		}

	}
	void ChangeTextType()
	{
		@if (isShow)
		{
			isShow = false;
			pwdIcon = Icons.Material.Filled.VisibilityOff;
			pwdType = InputType.Password;
		}
		else
		{
			isShow = true;
			pwdIcon = Icons.Material.Filled.Visibility;
			pwdType = InputType.Text;
		}
	}
}
