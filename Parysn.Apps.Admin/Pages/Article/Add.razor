@page "/articles/article/add"
<PageTitle>بیزبان | ایجاد مقاله جدید</PageTitle>
<MudContainer>
    <MudCard>
        <MudCardContent>

            <MudCardHeader Style="@($"background-color:{Colors.Gray.Lighten4}")" dir="rtl" Dense Elevation="1">
                <MudText>ثبت مقاله جدید</MudText>
                <MudSpacer />
                <MudButton Size="Size.Small" IconSize="Size.Small" OnClick="@(()=>_nv.NavigateTo("/articles/article"))" Variant="Variant.Text" Class="custom-font" EndIcon="fal fa-chevron-left">
                    <MudText>بازگشت</MudText>
                </MudButton>
            </MudCardHeader>
            <MudContainer Class="mt-3">
                <MudForm dir="rtl">
                    <MudGrid>

                        <MudItem xs="12" lg="6">
                            <MudSelect T="int" Variant="Variant.Outlined" Margin="Margin.Dense" @bind-Value="model.CategoryId" Class="mud-rtl" T="string" Label="دسته بندی">
                                <MudSelectItem Value="0">انتخاب دسته بندی</MudSelectItem>
                                @foreach (var item in articleCategories)
                                {
                                    <MudSelectItem Value="item.Id">@item.Title</MudSelectItem>
                                }
                            </MudSelect>
                        </MudItem>
                        <MudItem xs="12" lg="6">
                            <MudTextField InputType="InputType.Text" Variant="Variant.Outlined" Margin="Margin.Dense" @bind-Value="model.Title" Class="mud-rtl" T="string" Label="عنوان اصلی"></MudTextField>
                        </MudItem>
                        <MudItem xs="12" lg="6">
                            @if (!string.IsNullOrEmpty(model.Image))
                            {
                                <div><img style="width:3rem;height:3rem;" src="@model.Image" /></div>
                            }
                            <MediaSelector OnMediaSelected="mediaSelected" Title="عکس " DisplayInline="false"></MediaSelector>
                        </MudItem>
                        <MudItem xs="12" lg="6">
                            <MudTextField MaxLength="350" Lines="4" MaxLines="4" InputType="InputType.Text" Variant="Variant.Outlined" Margin="Margin.Dense" dir="ltr" @bind-Value="model.ShortDescription" T="string" Label="توضیحات - کوتاه"></MudTextField>
                        </MudItem>

                        <MudItem xs="12" lg="12">
                            <MudExRichTextEdit @ref="_editor" @bind-Value="model.Description" Placeholder="محتوا" dir="rtl">

                            </MudExRichTextEdit>
                        </MudItem>
                        <MudItem xs="12" lg="12">
                            <Seo model="model.Seo" Title="@model.Title" OnSeoChanged="(Seo)=>{model.Seo = Seo;StateHasChanged();}" />
                        </MudItem>
                    </MudGrid>
                </MudForm>
            </MudContainer>

        </MudCardContent>
        <MudCardActions>
            <MudButton Disabled="@_saving" @onclick="RegisterModel" Variant="Variant.Outlined" Color="Color.Primary" Size="Size.Small">
                @if (_saving)
                {
                    <MudProgressCircular Size="Size.Small" Color="@Color.Primary" Indeterminate="true" />
                }
                else
                {
                    <MudText>ذخیره</MudText>
                }
            </MudButton>

        </MudCardActions>
    </MudCard>
</MudContainer>

@code {
    MudExRichTextEdit _editor;
    private bool _saving { get; set; } = false;
    private ArticleModel model = new ArticleModel();
    HttpClientHelper<ArticleModel> hch = new HttpClientHelper<ArticleModel>(UIHelper.ApiUrl());
    HttpClient _hc;
    List<ArticleCategoryModel> articleCategories = new List<ArticleCategoryModel>();
    protected override async Task OnInitializedAsync()
    {
        hch.SetToken(await USR.GetToken());
        _hc = hch.Instance();
        await LoadCategories();
        await base.OnInitializedAsync();
    }
    private async Task LoadCategories()
    {
        articleCategories = await _hc.GetFromJsonAsync<List<ArticleCategoryModel>>("ArticleCat");
        StateHasChanged();
    }
    private async void RegisterModel()
    {
        _saving = true;
        var res = await hch.Post(model, "Article");
        _saving = false;
        model = new ArticleModel();
        _snackbar.Add(res.Msg, res.Status == ResponseObjectStatusEnum.Error ? Severity.Error : Severity.Success);
        StateHasChanged();
        Thread.Sleep(1500);
        _nv.NavigateTo("articles/article");


    }
    private async void mediaSelected(Tuple<int, string> selectedItem)
    {
        model.Image = UIHelper.ApiUrl() + $"fm/dn/{selectedItem.Item1}/{selectedItem.Item2}";
        StateHasChanged();

    }
}
