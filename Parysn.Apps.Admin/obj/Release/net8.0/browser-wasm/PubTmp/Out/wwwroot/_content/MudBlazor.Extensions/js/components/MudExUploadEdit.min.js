export function initializeMudExUploadEdit(n,t,i,r){function e(t){t.preventDefault();n.classList.add("hover")}function s(t){t.preventDefault();n.classList.remove("hover")}async function f(n,t=[],i=""){const r=[];for await(const[o,e]of n.entries())if(e.kind==="directory"){const n=t.concat(o);r.push(...await f(e,n,i))}else{var u=await e.getFile();u.relativePath=i+t.join("/")+(t.length>0?"/":"")+o;r.push(u)}return r}function u(n){t.files=Array.isArray(n)?c(n):n;r.invokeMethodAsync("UpdatePathMappings",Array.from(t.files).map(n=>({name:n.name,relativePath:n?.relativePath?.substring(0,n?.relativePath?.lastIndexOf("/")+1),size:n.size,contentType:n.type})));t.dispatchEvent(new Event("change",{bubbles:!0}))}async function h(){const n=await window.showDirectoryPicker(),t=await f(n,[],`${n.name}/`);u(t)}function c(n){const t=new DataTransfer;return(n||[]).forEach(n=>t.items.add(n)),t.files}function l(n){return!n.type||n.type===""?n.webkitGetAsEntry().isDirectory:!1}async function o(n){let t=[];for await(const r of n.dataTransfer?n.dataTransfer.items:n)if(l(r)){var i=await r.getAsFileSystemHandle();t.push(...await f(i,[],`${i.name}/`))}else t.push(r.getAsFile());return t}async function a(t){t.preventDefault();t.stopPropagation();n.classList.remove("hover");i?u(await o(t)):u(t.dataTransfer.files)}async function v(n){i?u(await o(n.clipboardData.items)):u(n.clipboardData.files)}return n&&(n.ondragenter=e,n.ondragover=e,n.ondragleave=s,n.ondrop=a,n.onpaste=v),{selectFolder:()=>{h()},dispose:()=>{n&&(n.ondragenter=null,n.ondragover=null,n.ondragleave=null,n.ondrop=null,n.onpaste=null)}}}