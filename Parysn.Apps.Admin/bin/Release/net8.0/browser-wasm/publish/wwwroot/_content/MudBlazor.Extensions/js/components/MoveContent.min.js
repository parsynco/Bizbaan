export function initializeMoveContent(t,i){return new n(t,i)}class n{elementRef;dotnet;selector;elFromSelector;mode;position;constructor(n,t){this.elementRef=n;this.dotnet=t}getSourceAndTarget(n){return n==="MoveFromSelector"?{source:this.elFromSelector,target:this.elementRef}:{source:this.elementRef,target:this.elFromSelector}}move(n,t,i,r,u){this.mode=t;this.position=i;this.selector=Array.isArray(n)?n:[n];r=this.getOwner(r,u);for(let n of this.selector)if(this.elFromSelector=r.querySelector(n),this.elFromSelector)break;this.dotnet.invokeMethodAsync("ElementFoundChanged",!!this.elFromSelector);var f=this.getSourceAndTarget(t);this.elFromSelector&&f.source&&f.target&&!f.target.contains(f.source)&&!f.source.contains(f.target)&&(i==="BeforeBegin"?f.target.insertBefore(f.source,f.target.firstChild):i==="AfterBegin"?f.target.insertBefore(f.source,f.target.firstChild.nextSibling):i==="BeforeEnd"?f.target.insertBefore(f.source,f.target.lastChild):i==="AfterEnd"&&f.target.appendChild(f.source))}getOwner(n,t){if((!n||!n.querySelector)&&t&&this.elementRef&&(n=this.elementRef.parentElement),n&&n.querySelector){if(t){var i=typeof t=="number"?t:1;for(let t=0;t<i;t++)if(n.parentElement)n=n.parentElement;else break}}else n=document;return n}dispose(){try{var n=this.getSourceAndTarget(this.mode);n&&n.target&&n.source&&n.target.contains(n.source)&&n.target.removeChild(n.source)}catch(t){}}}window.MoveContent=n;